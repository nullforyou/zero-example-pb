// Code generated by goctl. DO NOT EDIT.
// Source: payment.proto

package paymentclient

import (
	"context"

	"greet-pb/payment/types/payment"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreatePaymentReply    = payment.CreatePaymentReply
	CreatePaymentReq      = payment.CreatePaymentReq
	PaymentNoticePayReply = payment.PaymentNoticePayReply
	PaymentNoticeReq      = payment.PaymentNoticeReq

	Payment interface {
		// 创建支付单
		CreatePayment(ctx context.Context, in *CreatePaymentReq, opts ...grpc.CallOption) (*CreatePaymentReply, error)
		// 支付结果通知
		OrderPaymentNoticeTccTry(ctx context.Context, in *PaymentNoticeReq, opts ...grpc.CallOption) (*PaymentNoticePayReply, error)
		OrderPaymentNoticeTccConfirm(ctx context.Context, in *PaymentNoticeReq, opts ...grpc.CallOption) (*PaymentNoticePayReply, error)
		OrderPaymentNoticeTccCancel(ctx context.Context, in *PaymentNoticeReq, opts ...grpc.CallOption) (*PaymentNoticePayReply, error)
	}

	defaultPayment struct {
		cli zrpc.Client
	}
)

func NewPayment(cli zrpc.Client) Payment {
	return &defaultPayment{
		cli: cli,
	}
}

// 创建支付单
func (m *defaultPayment) CreatePayment(ctx context.Context, in *CreatePaymentReq, opts ...grpc.CallOption) (*CreatePaymentReply, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.CreatePayment(ctx, in, opts...)
}

// 支付结果通知
func (m *defaultPayment) OrderPaymentNoticeTccTry(ctx context.Context, in *PaymentNoticeReq, opts ...grpc.CallOption) (*PaymentNoticePayReply, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.OrderPaymentNoticeTccTry(ctx, in, opts...)
}

func (m *defaultPayment) OrderPaymentNoticeTccConfirm(ctx context.Context, in *PaymentNoticeReq, opts ...grpc.CallOption) (*PaymentNoticePayReply, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.OrderPaymentNoticeTccConfirm(ctx, in, opts...)
}

func (m *defaultPayment) OrderPaymentNoticeTccCancel(ctx context.Context, in *PaymentNoticeReq, opts ...grpc.CallOption) (*PaymentNoticePayReply, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.OrderPaymentNoticeTccCancel(ctx, in, opts...)
}
